/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ContractThatCallsPublicFunctionsContract
  extends Truffle.Contract<ContractThatCallsPublicFunctionsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ContractThatCallsPublicFunctionsInstance>;
}

type AllEvents = never;

export interface ContractThatCallsPublicFunctionsInstance
  extends Truffle.ContractInstance {
  callSetFoo: {
    (
      contractAddress: string,
      foo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractAddress: string,
      foo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      contractAddress: string,
      foo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddress: string,
      foo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  callGetFoo(
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  callSetBar: {
    (
      contractAddress: string,
      bar: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractAddress: string,
      bar: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      contractAddress: string,
      bar: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractAddress: string,
      bar: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  callGetBar(
    contractAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    callSetFoo: {
      (
        contractAddress: string,
        foo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddress: string,
        foo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        contractAddress: string,
        foo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddress: string,
        foo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    callGetFoo(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    callSetBar: {
      (
        contractAddress: string,
        bar: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractAddress: string,
        bar: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        contractAddress: string,
        bar: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractAddress: string,
        bar: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    callGetBar(
      contractAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Eip712Contract extends Truffle.Contract<Eip712Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Eip712Instance>;
}

type AllEvents = never;

export interface Eip712Instance extends Truffle.ContractInstance {
  /**
   * Make EIP712 domain separator
   * @param name Contract name
   * @param version Contract version
   */
  makeDomainSeparator(
    name: string,
    version: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Verify a EIP712 signature
   * @param domainSeparator Domain separator
   * @param r r of the signature
   * @param s s of the signature
   * @param signer Expected signer's address
   * @param typeHashAndData Type hash concatenated with data
   * @param v v of the signature
   */
  verifySignature(
    domainSeparator: string,
    signer: string,
    v: number | BN | string,
    r: string,
    s: string,
    typeHashAndData: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;

  methods: {
    /**
     * Make EIP712 domain separator
     * @param name Contract name
     * @param version Contract version
     */
    makeDomainSeparator(
      name: string,
      version: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Verify a EIP712 signature
     * @param domainSeparator Domain separator
     * @param r r of the signature
     * @param s s of the signature
     * @param signer Expected signer's address
     * @param typeHashAndData Type hash concatenated with data
     * @param v v of the signature
     */
    verifySignature(
      domainSeparator: string,
      signer: string,
      v: number | BN | string,
      r: string,
      s: string,
      typeHashAndData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}

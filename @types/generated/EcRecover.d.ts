/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface EcRecoverContract extends Truffle.Contract<EcRecoverInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EcRecoverInstance>;
}

type AllEvents = never;

export interface EcRecoverInstance extends Truffle.ContractInstance {
  /**
   * Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol Modifications: Accept v, r, and s as separate arguments
   * Recover signer's address from a signed message
   * @param digest Keccak-256 hash digest of the signed message
   * @param r r of the signature
   * @param s s of the signature
   * @param v v of the signature
   */
  recover(
    digest: string,
    v: number | BN | string,
    r: string,
    s: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    /**
     * Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol Modifications: Accept v, r, and s as separate arguments
     * Recover signer's address from a signed message
     * @param digest Keccak-256 hash digest of the signed message
     * @param r r of the signature
     * @param s s of the signature
     * @param v v of the signature
     */
    recover(
      digest: string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
